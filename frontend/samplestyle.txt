
/* Chat Interface Styles */
.chat-container {
  display: flex;
  flex-direction: column;
  height: 100%;
  max-width: 1200px;
  margin: 0 auto;
  background: rgba(34, 40, 49, 0.1);
  border: 1px solid rgba(34, 40, 49, 0.3);
  border-radius: 8px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
}

/* Header Styles */
.chat-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 24px;
  border-bottom: 1px solid rgba(34, 40, 49, 0.3);
  background: rgba(15, 23, 42, 0.5);
  backdrop-filter: blur(8px);
}

.header-left {
  display: flex;
  align-items: center;
  gap: 16px;
}

.status-indicator {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #06b6d4;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

.header-text h1 {
  font-size: 18px;
  font-weight: 500;
  color: #f8fafc;
  margin: 0;
}

.header-text p {
  font-size: 14px;
  color: #64748b;
  margin: 0;
}

.header-right {
  display: flex;
  align-items: center;
  gap: 12px;
  font-size: 14px;
  color: #64748b;
}

/* Messages Styles */
.messages-container {
  flex: 1;
  overflow-y: auto;
  padding: 24px;
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.message {
  display: flex;
  gap: 16px;
  padding: 16px;
  border-radius: 8px;
  border: 1px solid transparent;
  transition: all 0.2s ease;
}

.bot-message {
  border-color: rgba(34, 40, 49, 0.3);
  background: rgba(34, 40, 49, 0.2);
}

.user-message {
  border-color: rgba(34, 40, 49, 0.2);
  background: rgba(15, 23, 42, 0.5);
}

.message-avatar {
  flex-shrink: 0;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #64748b;
}

.bot-message .message-avatar {
  background: #1e293b;
}

.user-message .message-avatar {
  background: #334155;
  color: #cbd5e1;
}

.message-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.message-header {
  display: flex;
  align-items: center;
  gap: 12px;
}

.message-sender {
  font-size: 14px;
  font-weight: 500;
  color: #f8fafc;
}

.message-time {
  font-size: 12px;
  color: #64748b;
}

.message-text {
  font-size: 14px;
  color: #f8fafc;
  line-height: 1.6;
}

.message-text p {
  margin: 0;
  white-space: pre-wrap;
}

/* Loading Animation */
.loading-message {
  border-color: rgba(34, 40, 49, 0.2);
  background: rgba(34, 40, 49, 0.2);
}

.loading-dots {
  display: flex;
  gap: 4px;
}

.dot {
  width: 6px;
  height: 6px;
  background: #64748b;
  border-radius: 50%;
  animation: bounce 1.4s infinite ease-in-out both;
}

.dot:nth-child(1) {
  animation-delay: -0.32s;
}

.dot:nth-child(2) {
  animation-delay: -0.16s;
}

@keyframes bounce {
  0%, 80%, 100% {
    transform: scale(0);
  }
  40% {
    transform: scale(1);
  }
}

/* Input Styles */
.input-container {
  padding: 24px;
  border-top: 1px solid rgba(34, 40, 49, 0.3);
  background: rgba(15, 23, 42, 0.5);
  backdrop-filter: blur(8px);
}

.input-wrapper {
  display: flex;
  gap: 16px;
  align-items: flex-end;
}

.message-input {
  flex: 1;
  min-height: 50px;
  padding: 12px 16px;
  background: #0f172a;
  border: 1px solid rgba(34, 40, 49, 0.5);
  border-radius: 6px;
  color: #f8fafc;
  font-size: 14px;
  font-family: inherit;
  resize: none;
  outline: none;
  transition: border-color 0.2s ease;
}

.message-input:focus {
  border-color: rgba(6, 182, 212, 0.5);
}

.message-input::placeholder {
  color: #64748b;
}

.message-input:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.send-button {
  height: 50px;
  width: 50px;
  background: #06b6d4;
  border: none;
  border-radius: 6px;
  color: #0f172a;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
}

.send-button:hover:not(:disabled) {
  background: #0891b2;
}

.send-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Dark Theme Variables */
:root {
  --bg-primary: #0f172a;
  --bg-secondary: #1e293b;
  --bg-tertiary: #334155;
  --text-primary: #f8fafc;
  --text-secondary: #cbd5e1;
  --text-muted: #64748b;
  --border: rgba(34, 40, 49, 0.3);
  --accent: #06b6d4;
}

/* Responsive Design */
@media (max-width: 768px) {
  .chat-header {
    padding: 16px;
  }
  
  .messages-container {
    padding: 16px;
    gap: 16px;
  }
  
  .input-container {
    padding: 16px;
  }
  
  .message {
    padding: 12px;
  }
  
  .input-wrapper {
    gap: 12px;
  }
}

import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Activity } from 'lucide-react';
import './ChatInterface.css';

const ChatInterface = () => {
  const [messages, setMessages] = useState([
    {
      id: "1",
      text: "System initialized. I'm ready to assist with your inquiries and provide detailed analysis across various domains.",
      isBot: true,
      timestamp: new Date(),
    },
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSend = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage = {
      id: Date.now().toString(),
      text: input,
      isBot: false,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    // Replace this with your actual LLM integration
    setTimeout(() => {
      const botResponse = {
        id: (Date.now() + 1).toString(),
        text: "Processing your request. This interface is designed for seamless integration with advanced language models and provides a professional environment for complex analytical tasks.",
        isBot: true,
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, botResponse]);
      setIsLoading(false);
    }, 1500);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <div className="chat-container">
      {/* Header */}
      <div className="chat-header">
        <div className="header-left">
          <div className="status-indicator"></div>
          <div className="header-text">
            <h1>Research Assistant</h1>
            <p>Advanced Language Model Interface</p>
          </div>
        </div>
        
        <div className="header-right">
          <Activity size={16} />
          <span>Active</span>
        </div>
      </div>

      {/* Messages */}
      <div className="messages-container">
        {messages.map((message) => (
          <div key={message.id} className={`message ${message.isBot ? 'bot-message' : 'user-message'}`}>
            <div className="message-avatar">
              {message.isBot ? <Bot size={16} /> : <User size={16} />}
            </div>
            
            <div className="message-content">
              <div className="message-header">
                <span className="message-sender">
                  {message.isBot ? "System" : "User"}
                </span>
                <span className="message-time">
                  {message.timestamp.toLocaleTimeString()}
                </span>
              </div>
              
              <div className="message-text">
                <p>{message.text}</p>
              </div>
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="message bot-message loading-message">
            <div className="message-avatar">
              <Bot size={16} />
            </div>
            <div className="message-content">
              <div className="message-header">
                <span className="message-sender">System</span>
                <span className="message-time">processing...</span>
              </div>
              <div className="loading-dots">
                <div className="dot"></div>
                <div className="dot"></div>
                <div className="dot"></div>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="input-container">
        <div className="input-wrapper">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Enter your query..."
            className="message-input"
            disabled={isLoading}
          />
          
          <button
            onClick={handleSend}
            disabled={!input.trim() || isLoading}
            className="send-button"
          >
            <Send size={16} />
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatInterface;
# Standalone Chat Interface

This is a professional, scientific-looking chat interface built with React that you can easily integrate into any project.

## Files Included

- `ChatInterface.jsx` - Main React component
- `ChatInterface.css` - All styling
- `README.md` - Integration instructions

## Integration Steps

1. **Copy the files** to your project:
   ```
   /components/
     ChatInterface.jsx
     ChatInterface.css
   ```

2. **Install Lucide React** for icons:
   ```bash
   npm install lucide-react
   # or
   yarn add lucide-react
   ```

3. **Use the component**:
   ```jsx
   import ChatInterface from './components/ChatInterface';
   
   function App() {
     return (
       <div style={{ height: '100vh', background: '#0f172a' }}>
         <ChatInterface />
       </div>
     );
   }
   ```

## Customization

### Colors
Edit the CSS variables in `ChatInterface.css`:
```css
:root {
  --bg-primary: #0f172a;
  --bg-secondary: #1e293b;
  --text-primary: #f8fafc;
  --accent: #06b6d4;
}
```

### LLM Integration
Replace the setTimeout in `handleSend` function with your actual API call:

```javascript
const handleSend = async () => {
  // ... existing code ...
  
  try {
    const response = await fetch('/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: input })
    });
    
    const data = await response.json();
    
    const botResponse = {
      id: (Date.now() + 1).toString(),
      text: data.response,
      isBot: true,
      timestamp: new Date(),
    };
    
    setMessages(prev => [...prev, botResponse]);
  } catch (error) {
    console.error('Error:', error);
  } finally {
    setIsLoading(false);
  }
};
```

## Features

- ✅ Professional dark theme
- ✅ Responsive design
- ✅ Loading states
- ✅ Message timestamps
- ✅ Smooth scrolling
- ✅ Keyboard shortcuts (Enter to send)
- ✅ Clean, minimal styling
- ✅ Scientific/professional appearance
- ✅ Easy to customize

## Browser Support

Works in all modern browsers that support:
- CSS Grid
- Flexbox
- ES6+
- React 16.8+ (hooks)
